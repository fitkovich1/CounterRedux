{"version":3,"sources":["serviceWorker.js","bll/reducer.js","bll/store.js","Button.js","ButtonsContainer.js","Display.js","InputForSetting.js","Settings.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","max","start","count","settingsApplied","store","createStore","state","action","type","Number","status","newMaxValue","newStartValue","Button","className","onClick","this","props","disabled","title","React","Component","ButtonsContainer","incrementCount","decrementCount","resetCount","incButtonDisabled","isBtnDecDisabled","isBtnResetDisabled","ConnectedButtonsContainer","connect","dispatch","Display","invalid","ConnectedDisplay","InputForSetting","inputClass","classes","errorMax","errorStart","value","onChange","Settings","applySettings","setAppliedSettings","setMaxValue","event","currentTarget","setStartValue","errorValue","ConnectedSettings","setMaxValueAC","setStartValueAC","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.797ee562.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    max: 5,\r\n    start: 0,\r\n    count: 0,\r\n    settingsApplied: false\r\n};\r\n\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'INCREMENT_COUNT':\r\n            return state.count < state.max\r\n                ? {...state, count: Number(state.count) + 1}\r\n                : state;\r\n\r\n        case 'DECREMENT_COUNT':\r\n            return {...state, count: Number(state.count) - 1};\r\n        case 'RESET_COUNT':\r\n            return {...state, count: state.start};\r\n        case 'APPLY_SETTINGS':\r\n            return {...state, settingsApplied: action.status, count: state.start};\r\n        case 'SET_MAX_VALUE':\r\n            return {...state, max: Number(action.newMaxValue), settingsApplied: false};\r\n        case 'SET_START_VALUE':\r\n            return {\r\n                ...state,\r\n                start: Number(action.newStartValue),\r\n                count: Number(action.newStartValue),\r\n                settingsApplied: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const incrementCountAC = () => ({\r\n    type: 'INCREMENT_COUNT'\r\n});\r\n\r\nexport const decrementCountAC = () => ({\r\n    type: 'DECREMENT_COUNT'\r\n});\r\n\r\nexport const resetCountAC = () => ({\r\n    type: 'RESET_COUNT'\r\n});\r\n\r\nexport const setMaxValueAC = (newMaxValue) => ({\r\n    type: 'SET_MAX_VALUE',\r\n    newMaxValue: newMaxValue\r\n});\r\n\r\nexport const setStartValueAC = (newStartValue) => ({\r\n    type: 'SET_START_VALUE',\r\n    newStartValue: newStartValue\r\n});\r\n\r\nexport const setAppliedSettings = (status) => (\r\n    {\r\n        type: 'APPLY_SETTINGS',\r\n        status\r\n    });\r\n\r\n\r\n\r\n","import {createStore} from \"redux\";\r\nimport {reducer} from './reducer';\r\n\r\nconst store = createStore(reducer);\r\n\r\n\r\nexport default store;\r\n","import React from 'react';\nimport './App.css';\n\nclass Button extends React.Component {\n    render() {\n        return (\n            <div>\n                <button\n                    className='button'\n                    onClick={this.props.onClick}\n                    disabled={this.props.disabled}\n                >\n                    {this.props.title}\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default Button;\n","import React from 'react';\r\nimport './App.css';\r\nimport Button from \"./Button\";\r\nimport {connect} from \"react-redux\";\r\nimport {decrementCountAC, incrementCountAC, resetCountAC} from \"./bll/reducer\";\r\n\r\n\r\n\r\nclass ButtonsContainer extends React.Component {\r\n\r\n    incrementCount = () => {\r\n        this.props.incrementCount();\r\n    };\r\n\r\n    decrementCount = () => {\r\n        this.props.decrementCount();\r\n    };\r\n\r\n    resetCount = () => {\r\n        this.props.resetCount();\r\n    };\r\n\r\n    render() {\r\n        let incButtonDisabled = this.props.count === this.props.max || !this.props.settingsApplied;\r\n        let isBtnDecDisabled = this.props.count === -(this.props.max) || !this.props.settingsApplied; // rename without \"is\"\r\n        let isBtnResetDisabled = this.props.count === this.props.start || !this.props.settingsApplied; // rename without \"is\"\r\n\r\n        return (\r\n                <div className='buttonsContainer'>\r\n                    <div className='buttons'>\r\n                        <Button onClick={this.incrementCount} disabled={incButtonDisabled} title='INC'/>\r\n                        <Button onClick={this.resetCount} disabled={isBtnResetDisabled}\r\n                                title='Reset'/>\r\n                        <Button onClick={this.decrementCount} disabled={isBtnDecDisabled} title='DEC'/>\r\n                    </div>\r\n\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        max: state.max,\r\n        start: state.start,\r\n        settingsApplied: state.settingsApplied,\r\n        count: state.count\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n        return {\r\n            incrementCount(){\r\n                const action = incrementCountAC();\r\n                dispatch(action)\r\n            },\r\n            decrementCount(){\r\n                const action = decrementCountAC();\r\n                dispatch(action);\r\n            },\r\n            resetCount() {\r\n                const action = resetCountAC();\r\n                dispatch(action);\r\n            }\r\n        }\r\n};\r\n\r\nconst ConnectedButtonsContainer = connect(mapStateToProps, mapDispatchToProps)(ButtonsContainer);\r\n\r\nexport default ConnectedButtonsContainer;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ButtonsContainer from \"./ButtonsContainer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Display extends React.Component {\r\n    render() {\r\n        let invalid = this.props.start >= this.props.max;\r\n        let count = (this.props.count === this.props.max || this.props.count === -(this.props.max)) ? 'countActive' : 'count';\r\n        return (\r\n            <div className='block counterBlock'>\r\n\r\n                <div className={count}>\r\n                    {this.props.settingsApplied\r\n                        ? this.props.count\r\n                        : invalid\r\n                            ? 'Incorrect'\r\n                            : 'enter value'}\r\n                </div>\r\n                <ButtonsContainer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        max: state.max,\r\n        start: state.start,\r\n        settingsApplied: state.settingsApplied,\r\n        count: state.count\r\n    };\r\n};\r\n\r\nconst ConnectedDisplay = connect(mapStateToProps, null)(Display);\r\n\r\nexport default ConnectedDisplay;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nconst InputForSetting = (props) => {\r\n    const inputClass = props.classes.errorMax || props.classes.errorStart\r\n    return (\r\n        <>\r\n            <span> {props.title}\r\n                <input\r\n                    type='number'\r\n                    className={inputClass}\r\n                    value={props.value}\r\n                    onChange={props.onChange}\r\n                />\r\n            </span>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InputForSetting;\r\n","import React from 'react';\nimport Button from \"./Button\";\nimport {connect} from \"react-redux\";\nimport InputForSetting from \"./InputForSetting\";\nimport {setAppliedSettings, setMaxValueAC, setStartValueAC} from \"./bll/reducer\";\n\nclass Settings extends React.Component {\n\n    applySettings = () => {\n        this.props.setAppliedSettings(true)\n    };\n\n\n    setMaxValue = (event) => {\n        this.props.setMaxValue(Number(event.currentTarget.value));\n        this.props.setAppliedSettings(false)\n    };\n\n    setStartValue = (event) => {\n        this.props.setStartValue(Number(event.currentTarget.value));\n        this.props.setAppliedSettings(false)\n    };\n\n    render() {\n        let errorMax = this.props.max <= this.props.start ? 'countInput inputError' : 'countInput';\n        let errorStart = (this.props.start >= this.props.max) ? 'countInput inputError' : 'countInput';\n        let errorValue = this.props.max <= this.props.start || this.props.start >= this.props.max;\n        let {max, start, settingsApplied} = this.props;\n\n        return (\n            <div className='block'>\n                <div className='settings'>\n                    <InputForSetting classes={{errorMax}} value={max} onChange={this.setMaxValue}\n                                     title={'max value:'}/>\n                    <InputForSetting classes={{errorStart}} value={start} onChange={this.setStartValue}\n                                     title={'start value:'}/>\n\n                    <div className='buttons'>\n                        <Button onClick={this.applySettings} disabled={settingsApplied || errorValue} title='SET'/>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        max: state.max,\n        start: state.start,\n        settingsApplied: state.settingsApplied,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setMaxValue(newMaxValue) {\n            const action = setMaxValueAC(newMaxValue);\n            dispatch(action)\n        },\n        setStartValue(newStartValue) {\n            const action = setStartValueAC(newStartValue);\n            dispatch(action)\n        }\n        , setAppliedSettings: (status) => {\n            dispatch(setAppliedSettings(status))\n        }\n    }\n};\n\nconst ConnectedSettings = connect(mapStateToProps, mapDispatchToProps)(Settings);\n\nexport default ConnectedSettings;\n","import React from 'react';\nimport './App.css';\nimport ConnectedDisplay from \"./Display\";\nimport ConnectedSettings from \"./Settings\";\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className='App'>\n                <div className='container'>\n                    <ConnectedSettings/>\n                    <ConnectedDisplay/>\n                </div>\n            </div>\n        );\n    }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from './bll/store';\nimport App from \"./App\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}